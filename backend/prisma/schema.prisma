// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusMeeting {
  PENDING
  DONE
  CANCELED
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
  APPROVED
}

model User {
  id                      Int                       @id @default(autoincrement())
  email                   String                    @unique
  firstName               String                    @map("first_name")
  lastName                String                    @map("last_name")
  phone                   String?
  document                String?                   @unique
  birthDate               DateTime                  @db.Date
  instagram               String?
  pixKey                  String?
  photoKey                String?
  password                String
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  profileId               Int
  Profile                 Profile                   @relation(fields: [profileId], references: [id])
  UserMeeting             UserMeeting[]
  TimeRecord              TimeRecord[]
  Payment                 Payment[]
  Refund                  Refund[]
  PaymentRequest          PaymentRequest[]
  PaymentExpert           PaymentExpert[]
  PermissionUserTraining  PermissionUserTraining[]
  PermissionUserModule    PermissionUserModule[]
  PermissionUserSubModule PermissionUserSubModule[]

  @@map("users")
}

model Profile {
  id    Int    @id @default(autoincrement())
  name  String @unique
  label String
  User  User[]

  @@map("profiles")
}

model Meeting {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  link        String
  status      StatusMeeting @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  UserMeeting UserMeeting[]

  @@map("meetings")
}

model UserMeeting {
  userId    Int
  meetingId Int
  User      User    @relation(fields: [userId], references: [id])
  Meeting   Meeting @relation(fields: [meetingId], references: [id])

  @@id([userId, meetingId])
  @@map("user_meetings")
}

model TimeRecord {
  id        Int       @id @default(autoincrement())
  userId    Int
  startTime DateTime
  endTime   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  User      User      @relation(fields: [userId], references: [id])

  @@map("time_records")
}

model PaymentType {
  id      Int       @id @default(autoincrement())
  label   String    @unique
  Payment Payment[]

  @@map("payment_types")
}

model Payment {
  id            Int             @id @default(autoincrement())
  userId        Int
  value         Float
  paymentDate   DateTime?
  photoKey      String?
  status        PaymentStatus   @default(PENDING)
  paidBy        Int?
  description   String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  User          User            @relation(fields: [userId], references: [id])
  PaymentType   PaymentType?    @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId Int?
  PaymentExpert PaymentExpert[]

  @@map("payments")
}

model PaymentExpert {
  id        Int      @id @default(autoincrement())
  userId    Int
  paymentId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  Payment   Payment  @relation(fields: [paymentId], references: [id])

  @@map("payment_experts")
}

model RefundType {
  id     Int      @id @default(autoincrement())
  label  String   @unique
  Refund Refund[]

  @@map("refund_types")
}

model Refund {
  id           Int           @id @default(autoincrement())
  userId       Int
  value        Float
  refundDate   DateTime?
  photoKey     String?
  status       PaymentStatus @default(PENDING)
  reason       String?
  paidBy       Int?
  description  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  User         User          @relation(fields: [userId], references: [id])
  RefundType   RefundType?   @relation(fields: [refundTypeId], references: [id])
  refundTypeId Int?

  @@map("refunds")
}

model PaymentRequestType {
  id             Int              @id @default(autoincrement())
  label          String           @unique
  PaymentRequest PaymentRequest[]

  @@map("payment_request_types")
}

model PaymentRequest {
  id                   Int                 @id @default(autoincrement())
  userId               Int
  value                Float?
  requestDate          DateTime?
  photoKey             String?
  status               PaymentStatus       @default(PENDING)
  reason               String?
  paidBy               Int?
  description          String
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  User                 User                @relation(fields: [userId], references: [id])
  PaymentRequestType   PaymentRequestType? @relation(fields: [paymentRequestTypeId], references: [id])
  paymentRequestTypeId Int?

  @@map("payment_requests")
}

model Training {
  id                     Int                      @id @default(autoincrement())
  title                  String
  description            String
  tutor                  String
  thumbnail              String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  Module                 Module[]
  PermissionUserTraining PermissionUserTraining[]

  @@map("trainings")
}

model Module {
  id                   Int                    @id @default(autoincrement())
  title                String
  description          String?
  thumbnail            String?
  submodules           Submodule[]
  trainingId           Int // ID do treinamento pai
  training             Training               @relation(fields: [trainingId], references: [id])
  PermissionUserModule PermissionUserModule[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt

  @@map("modules")
}

// Tabela de Submódulos
model Submodule {
  id                      Int                       @id @default(autoincrement())
  title                   String
  description             String?
  thumbnail               String?
  moduleId                Int // ID do módulo pai
  module                  Module                    @relation(fields: [moduleId], references: [id])
  lessons                 Lesson[]
  PermissionUserSubModule PermissionUserSubModule[]
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt

  @@map("submodules")
}

// Tabela de Aulas
model Lesson {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  content     String // Este campo pode ser uma URL para vídeos, documentos, etc.
  thumbnail   String?
  submoduleId Int // ID do submódulo pai
  submodule   Submodule @relation(fields: [submoduleId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("lessons")
}

model PermissionUserTraining {
  id         Int      @id @default(autoincrement())
  userId     Int
  trainingId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  User       User     @relation(fields: [userId], references: [id])
  Training   Training @relation(fields: [trainingId], references: [id])

  @@map("permission_user_trainings")
}

model PermissionUserModule {
  id        Int      @id @default(autoincrement())
  userId    Int
  moduleId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  Module    Module   @relation(fields: [moduleId], references: [id])

  @@map("permission_user_modules")
}

model PermissionUserSubModule {
  id          Int       @id @default(autoincrement())
  userId      Int
  submoduleId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  User        User      @relation(fields: [userId], references: [id])
  Submodule   Submodule @relation(fields: [submoduleId], references: [id])

  @@map("permission_user_submodules")
}
