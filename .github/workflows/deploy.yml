name: Deploy

on:
  push:
    branches: [ master ]
    
jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Create backend .env file
        run: |
          cat > backend/.env << EOL
          NODE_ENV=production
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          PORT=3000
          ACCESS_KEY_ID=${{ secrets.ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY=${{ secrets.SECRET_ACCESS_KEY }}
          BUCKET=${{ secrets.BUCKET }}
          JWT_EXPIRATION_TIME=${{ secrets.JWT_EXPIRATION_TIME }}
          JWT_PRIVATE_KEY=${{ secrets.JWT_PRIVATE_KEY }}
          JWT_PUBLIC_KEY=${{ secrets.JWT_PUBLIC_KEY }}
          MAILER_USERNAME=${{ secrets.MAILER_USERNAME }}
          MAILER_PASSWORD=${{ secrets.MAILER_PASSWORD }}
          EOL
      
      - name: Create docker-compose .env file
        run: |
          cat > .env << EOL
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          EOL
      
      - name: Create deployment package
        run: |
          mkdir -p deploy-package
          cp docker-compose.yml deploy-package/
          cp .env deploy-package/
          cp -r backend deploy-package/
          cp -r frontend deploy-package/
          tar -czf membros-deployment.tar.gz deploy-package/
      
      # Copy files to server using SCP
      - name: Copy files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "membros-deployment.tar.gz"
          target: "/tmp"
      
      # Deploy to your server
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Parar e remover containers antigos
            cd /opt/colaborador-nohau/deploy-package 2>/dev/null && docker compose down || true
            
            # Clean old deployment
            rm -rf /opt/colaborador-nohau/deploy-package

            # Extract new deployment
            mkdir -p /opt/colaborador-nohau
            tar -xzf /tmp/membros-deployment.tar.gz -C /opt/colaborador-nohau
            cd /opt/colaborador-nohau/deploy-package            # Build com no-cache para garantir versão atual
            docker compose build --no-cache
            
            # Subir containers
            docker compose up -d
            
            # Limpar imagens e volumes antigos
            docker system prune -af
            
            # Aguardar containers iniciarem
            sleep 10
            
            # Verificar se os containers estão rodando
            docker ps | grep membros

