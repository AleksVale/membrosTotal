import { Injectable, NotFoundException } from '@nestjs/common';
import { CreateTrainingAdminDto } from './dto/create-training-admin.dto';
import { UpdateTrainingAdminDto } from './dto/update-training-admin.dto';
import { TrainingRepository } from 'src/repositories/training.repository';
import { Pagination } from 'src/common/dto/pagination.dto';
import { FilterTrainingDTO } from 'src/collaborator/home/dto/filter-training-dto';
import { AddPermissionAdminDTO } from 'src/admin/sub-modules-admin/dto/add-permissions-subModule-training.dto';
import { DuplicateTrainingAdminDTO } from './dto/duplicate-training-admin.dto';

@Injectable()
export class TrainingAdminService {
  constructor(private trainingRepository: TrainingRepository) {}

  async create(createTrainingAdminDto: CreateTrainingAdminDto, userId: number) {
    // Existing implementation
  }

  async findAll(options: Pagination & FilterTrainingDTO) {
    // Existing implementation
  }

  async findOne(id: number) {
    // Existing implementation
  }
  
  async getPermissions(id: number) {
    const training = await this.trainingRepository.find({ id });
    if (!training) throw new NotFoundException('ID inv√°lido');
    
    const users = await this.trainingRepository.getUsersWithPermission(id);
    return users;
  }

  async update(id: number, updateTrainingAdminDto: UpdateTrainingAdminDto) {
    // Existing implementation
  }

  async remove(id: number) {
    // Existing implementation
  }

  async updateStatus(id: number, status: string) {
    // Existing implementation
  }

  async addPermission(id: number, data: AddPermissionAdminDTO) {
    // Existing implementation
  }

  async duplicate(
    id: number,
    data: DuplicateTrainingAdminDTO,
    userId: number,
  ) {
    // Existing implementation
  }
}
